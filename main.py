import telebot
from telebot import types
import json
import random
import sqlite3

TOKEN = '6539104821:AAF8R7TVmFfUDw4dphSzRtK4pdJ44YMti5o'
bot = telebot.TeleBot(TOKEN)
user_data = {}


def load_results():
    conn = sqlite3.connect('quiz_results.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM results')
    results_data = {str(user_id): score for user_id, score in cursor.fetchall()}
    conn.close()
    return results_data


def save_results(results_data):
    conn = sqlite3.connect('quiz_results.db')
    cursor = conn.cursor()
    for user_id, score in results_data.items():
        cursor.execute('INSERT OR REPLACE INTO results (user_id, score) VALUES (?, ?)', (int(user_id), score))
    conn.commit()
    conn.close()


def show_results(chat_id):
    results_data = load_results()
    if not results_data:
        bot.send_message(chat_id, f"–í—ã –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")
    else:
        sorted_results = sorted(results_data.items(), key=lambda x: x[1], reverse=True) # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        found = next((result for result in sorted_results if str(chat_id) in result), None)
        if found:
            position = sorted_results.index(found) + 1
            bot.send_message(chat_id,
                             f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {results_data[str(chat_id)]}/10\n–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {position}/{len(sorted_results)}")
        else:
            bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def read_questions():
    with open("questions.json", "r", encoding="utf-8") as file:
        questions = json.load(file)

    for question in questions:
        question_text = question["question"]
        answer_choices = question_text.splitlines()[1:]
        question["answer_choices"] = answer_choices

    return questions


questions = read_questions()


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, """ –ü—Ä–∏–≤–µ—Ç! –ù–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è –ø–æ Python?
–ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:

1. –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã:
   - –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /play.
   - –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.

2. –û—Ç–≤–µ—Ç—ã:
   - –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (—Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4).
   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞–≥—Ä–∞–∂–¥–∞—é—Ç—Å—è –±–∞–ª–ª–∞–º–∏.

3. –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
   - –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
   - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π —Å—á–µ—Ç –∏–∑ 10 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±–∞–ª–ª–æ–≤.

4. –†–µ–π—Ç–∏–Ω–≥:
   - –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥.
   - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–º –º–µ—Å—Ç–µ –≤—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

5. –ò–≥—Ä–∞–π—Ç–µ —Å–Ω–æ–≤–∞:
   - –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /play —Å–Ω–æ–≤–∞.

6. –£–¥–∞—á–∏!
   - –ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!
""")


@bot.message_handler(commands=['play'])
def play(message):
    if not user_data.get(message.chat.id):
        user_data[message.chat.id] = {"current_question": 0, "score": 0}
        random_questions = random.sample(questions, 10)
        user_data[message.chat.id]["questions"] = random_questions
    send_question(message.chat.id)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id)

    if user:
        current_question = user["current_question"]
        random_questions = user["questions"]

        if current_question < len(random_questions):
            correct_option = random_questions[current_question]["correct_option"]

            if message.text.isdigit() and 1 <= int(message.text) <= len(
                    random_questions[current_question]["answer_choices"]):
                chosen_option = int(message.text) - 1

                if chosen_option == correct_option:
                    user["score"] += 1
                    bot.send_message(chat_id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ", reply_markup=None)
                else:
                    correct_answer = random_questions[current_question]["answer_choices"][correct_option]
                    bot.send_message(chat_id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}', reply_markup=None)

                user["current_question"] += 1
                send_question(chat_id)
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ 4.", reply_markup=None)
        else:
            results = load_results()
            if chat_id not in results:
                score = user["score"]
                results[chat_id] = score
                save_results(results)
                bot.send_message(chat_id, f'–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à —Å—á–µ—Ç: {score}/{len(questions)}', reply_markup=None)
                show_results(chat_id)
    else:
        bot.send_message(message.chat.id,
                         f"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.\n\n–ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n* –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n* –û—Ç–≤–µ—Ç—ã")


def send_question(chat_id):
    user = user_data[chat_id]
    current_question = user["current_question"]
    random_questions = user["questions"]

    if current_question < len(random_questions):
        question_data = random_questions[current_question]
        question_text = question_data["question"]
        answer_choices = question_data["answer_choices"]

        # Create a reply markup with numbered buttons
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for i, choice in enumerate(answer_choices, start=1):
            markup.add(types.KeyboardButton(f"{i}"))

        # Send the question with the numbered keyboard markup
        bot.send_message(chat_id, question_text, reply_markup=markup)
    else:
        bot.send_message(chat_id, "–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        results = load_results()
        if chat_id not in results:
            score = user["score"]
            results[chat_id] = score
            save_results(results)
            bot.send_message(chat_id, f'–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à —Å—á–µ—Ç: {score}/10', reply_markup=None)
            show_results(chat_id)


if __name__ == '__main__':
    results = load_results()
    bot.polling(none_stop=True)
